// <auto-generated/>
namespace Fanex.BetList.Core.UnitTest.Builder.StatusBuilder
{
    using System.Collections.Generic;
    using Common;
    using Core.Builder.StatusBuilder;
    using Core.Templates;
    using Entities;
    using NSubstitute;
    using NUnit.Framework;

    public class Status33Test
    {
        private const int WinBetId = 31;
        private const int PlaceBetId = 32;
        private Status33 _status;
        private ITicket _ticket;
        private ITicketHelper _ticketHelper;

        [SetUp]
        public void Setup()
        {
            _status = new Status33();
            _ticket = Substitute.For<ITicket>();
            _ticketHelper = Substitute.For<ITicketHelper>();
        }

        [TestCase("running", "Running")]
        [TestCase("waiting", "Waiting")]
        [TestCase("void", "Void")]
        [TestCase("reject", "Reject")]
        [TestCase("refund", "Refund")]
        public void BuildResult_Status_Result(string status, string expectedResult)
        {
            // Arrange
            _ticket.TransId = 1000;
            var ticketData = Substitute.For<List<ITicketData>>();
            var winTicketData = Substitute.For<ITicketData>();
            winTicketData.BetTypeId = WinBetId;
            winTicketData.RefNo = _ticket.TransId.ToString();
            winTicketData.Status = "draw";
            ticketData.Add(winTicketData);
            var placeTicketData = Substitute.For<ITicketData>();
            placeTicketData.BetTypeId = PlaceBetId;
            placeTicketData.RefNo = _ticket.TransId.ToString();
            placeTicketData.Status = "draw";
            ticketData.Add(placeTicketData);
            _ticket.Status = status;

            // Act
            _status.Render(_ticket, _ticketHelper, ticketData, false);

            // Assert
            Assert.AreEqual(expectedResult, _status.Template.result);
        }

        [TestCase("draw", "Draw")]
        [TestCase("lose", "Lose")]
        [TestCase("refund", "Refund")]
        [TestCase("reject", "Reject")]
        [TestCase("running", "Running")]
        [TestCase("void", "Void")]
        [TestCase("waiting", "Waiting")]
        [TestCase("won", "Won")]
        [TestCase("", "")]
        public void WinStatus_ReturnResult(string status, string expectedResult)
        {
            // Arrange
            _ticket.TransId = 1000;
            var ticketData = Substitute.For<List<ITicketData>>();
            var winTicketData = Substitute.For<ITicketData>();
            winTicketData.BetTypeId = WinBetId;
            winTicketData.RefNo = _ticket.TransId.ToString();
            winTicketData.Status = status;
            ticketData.Add(winTicketData);
            var placeTicketData = Substitute.For<ITicketData>();
            placeTicketData.BetTypeId = PlaceBetId;
            placeTicketData.RefNo = _ticket.TransId.ToString();
            placeTicketData.Status = "draw";
            ticketData.Add(placeTicketData);
            _ticket.Status = "lose";

            // Act
            _status.Render(_ticket, _ticketHelper, ticketData, false);

            // Assert
            var winStatus = string.Format("<span class='blue' style='font-weight:normal;'>Win: <b>{0}</b></span>", expectedResult);
            var placeStatus = "<span class='' style='font-weight:normal;'>Place: <b>Draw</b></span>";
            var expected = string.Format("{0}<br/>{1}", winStatus, placeStatus);
            Assert.AreEqual(expected, _status.Template.result);
        }

        [TestCase("draw", "Draw")]
        [TestCase("lose", "Lose")]
        [TestCase("refund", "Refund")]
        [TestCase("reject", "Reject")]
        [TestCase("running", "Running")]
        [TestCase("void", "Void")]
        [TestCase("waiting", "Waiting")]
        [TestCase("won", "Won")]
        [TestCase("", "")]
        public void PlaceStatus_ReturnResult(string status, string expectedResult)
        {
            // Arrange
            var ticketDatas = new List<ITicketData>();
            ticketDatas.Add(TestData.CreateTicketData(WinBetId, _ticket.TransId.ToString(), "draw"));
            ticketDatas.Add(TestData.CreateTicketData(PlaceBetId, _ticket.TransId.ToString(), status));
            _ticket.Status = "lose";

            // Act
            Status_Template template = _status.Render(_ticket, _ticketHelper, ticketDatas, false);

            // Assert
            var winStatus = "<span class='blue' style='font-weight:normal;'>Win: <b>Draw</b></span>";
            var placeStatus = string.Format("<span class='' style='font-weight:normal;'>Place: <b>{0}</b></span>", expectedResult);
            var expected = string.Format("{0}<br/>{1}", winStatus, placeStatus);
            Assert.AreEqual(expected, template.result);
        }
    }
}