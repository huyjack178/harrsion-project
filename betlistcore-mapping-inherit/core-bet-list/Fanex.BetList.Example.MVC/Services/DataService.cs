// <auto-generated/>
namespace Fanex.BetList.Example.MVC.Services
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Runtime.Caching;
    using System.Web.Hosting;
    using Fanex.BetList.Example.Data;
    using Fanex.BetList.Example.MVC.Models;
    using Fanex.BetList.Example.MVC.ViewModel;
    using NPOI.HSSF.UserModel;
    using NPOI.POIFS.FileSystem;
    using NPOI.SS.UserModel;

    public class DataService
    {
        private static readonly string BetTypeFilePath = HostingEnvironment.MapPath("~/App_Data/BetTypes.xls");

        public List<BetType> QueryBetTypes(params int[] betTypeIds)
        {
            ObjectCache cache = MemoryCache.Default;
            var betTypes = (List<BetType>)cache.Get("BetTypes");

            if (betTypes == null || !betTypes.Any())
            {
                betTypes = new List<BetType>();
                using (var input = new StreamReader(BetTypeFilePath))
                {
                    IWorkbook workbook = new HSSFWorkbook(new POIFSFileSystem(input.BaseStream));
                    ISheet sheet = workbook.GetSheet("BetTypes");
                    int lastRowNumber = sheet.LastRowNum;

                    for (int rowNum = 2; rowNum <= lastRowNumber; rowNum++)
                    {
                        var betType = CreateBetTypeFromExcelRow(sheet.GetRow(rowNum));
                        betTypes.Add(betType);
                    }
                }

                CacheItemPolicy policy = new CacheItemPolicy();
                policy.ChangeMonitors.Add(new HostFileChangeMonitor(new List<string> { BetTypeFilePath }));
                cache.Add("BetTypes", betTypes, policy);
            }

            if (betTypeIds.Length > 0)
            {
                return betTypes
                    .Where(betType => betTypeIds.Contains(betType.Id))
                    .Select(betType => betType)
                    .ToList();
            }

            return betTypes;
        }

        public BetListData GetBetListData(string sourcePath, int betTypeId)
        {
            ObjectCache cache = MemoryCache.Default;
            var absolutePath = HostingEnvironment.MapPath(sourcePath);

            var betListData = (BetListData)cache.Get(absolutePath);
            if (betListData == null || !betListData.Tickets.Any())
            {
                betListData = new BetListData();

                TicketsExcelDAO ticketDAO = new TicketsExcelDAO(absolutePath);
                betListData.Tickets = ticketDAO.GetTickets();
                betListData.TicketData = ticketDAO.GetTicketData().ToList();

                CacheItemPolicy policy = new CacheItemPolicy();
                policy.ChangeMonitors.Add(new HostFileChangeMonitor(new List<string> { absolutePath }));
                cache.Set(absolutePath, betListData, policy);
            }

            return betListData;
        }

        private BetType CreateBetTypeFromExcelRow(IRow row)
        {
            if (row == null)
            {
                throw new ArgumentNullException();
            }

            BetType betType = new BetType();
            betType.Id = Convert.ToInt32(row.Cells[0].NumericCellValue);
            betType.Name = betType.Id.ToString() + " - " + row.Cells[1].StringCellValue;
            betType.Description = row.Cells[2].StringCellValue;
            betType.Note = row.Cells[3].StringCellValue;
            betType.Category = row.Cells[4].StringCellValue;

            return betType;
        }
    }
}