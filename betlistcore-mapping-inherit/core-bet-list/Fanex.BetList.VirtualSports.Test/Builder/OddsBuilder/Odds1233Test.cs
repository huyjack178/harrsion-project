// <auto-generated/>
namespace Fanex.BetList.Core.UnitTest.Builder.OddsBuilder
{
    using System.Collections.Generic;
    using Common;
    using Common.Enums;
    using Core.Builder.OddsBuilder;
    using Core.Templates;
    using Entities;
    using NUnit.Framework;
    using Stubs;

    public class Odds1233Test
    {
        private Odds1233 _odds;
        private ITicket _ticket;
        private ITicketHelper _ticketHelperStub;
        private const int WinBetId = 1231;
        private const int PlaceBetId = 1232;

        [SetUp]
        public void Setup()
        {
            _odds = new Odds1233();
            _ticket = TestData.CreateTicket(BetTypes.VHR_WinPlace);
            _ticketHelperStub = new TicketHelperStub();
        }

        [Test]
        public void StatusIsRunningOrWaitingOrVoidOrRejectOrRefund_ReturnResult()
        {
            // Arrange
            var ticketDatas = new List<ITicketData>();
            var winTicketData = TestData.CreateTicketData(WinBetId, _ticket.RefNo, "draw");
            var placeTicketData = TestData.CreateTicketData(PlaceBetId, _ticket.RefNo, "draw");
            ticketDatas.Add(winTicketData);
            ticketDatas.Add(placeTicketData);

            // Act
            Odds_Template template = _odds.Render(_ticket, ticketDatas, GetCachePropertyByIdStub);

            // Assert
            var oddsWin = string.Format("<span class='blue' style='font-weight:normal;'>Win: <b>{0}</b></span>", winTicketData.Odds);
            var oddsPlace = string.Format("<span class='' style='font-weight:normal;'>Place: <b>{0}</b></span>", placeTicketData.Odds);
            var expected = string.Format("{0}<br>{1}", oddsWin, oddsPlace);
            Assert.AreEqual(expected, template.odds);
        }

        [Test]
        public void StatusIsRunningOrWaitingOrVoidOrRejectOrRefund_ReturnResult2()
        {
            // Arrange
            var ticketDatas = new List<ITicketData>();
            var winTicketData = TestData.CreateTicketData(WinBetId, _ticket.TransId.ToString(), "draw");
            var placeTicketData = TestData.CreateTicketData(PlaceBetId, _ticket.TransId.ToString(), "draw");
            ticketDatas.Add(winTicketData);
            ticketDatas.Add(placeTicketData);

            // Act
            Odds_Template template = _odds.Render(_ticket, ticketDatas, GetCachePropertyByIdStub);

            // Assert
            var expected = "-";
            Assert.AreEqual(expected, template.odds);
        }

        [Test]
        public void StatusIsRunningOrWaitingOrVoidOrRejectOrRefund_ReturnResult1()
        {
            // Act
            Odds_Template template = _odds.Render(_ticket, null, GetCachePropertyByIdStub);

            // Assert
            var expected = "-";
            Assert.AreEqual(expected, template.odds);
        }

        private string GetCachePropertyByIdStub(object id)
        {
            return id.ToString();
        }
    }
}