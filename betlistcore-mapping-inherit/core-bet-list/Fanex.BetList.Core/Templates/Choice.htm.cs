// <auto-generated />
#region!!!This file is auto-generated by TplBuilder, don't modify it manually!!!
using System;
using System.Web;
using System.Text;
using TplCore;
using TplCore.Element;
#pragma warning disable
namespace Fanex.BetList.Core
{
	using Templates;
	namespace Templates
	{
		public class Choice_Template : Template
		{
			protected static string s0 = "<div class='";
			public string ticketStatus = "";
			protected static string s1 = "'>";
			public Choice_ScoreMapIcon_Block ScoreMapIcon = new Choice_ScoreMapIcon_Block();
			protected static string s2 = "<span class=\"";
			public string betTeamClassName = "{betTeamClassName}";
			protected static string s3 = "\">";
			public string betTeam = "{betTeam}";
			public Choice_Handicap_Block Handicap = new Choice_Handicap_Block();
			public Choice_OddMixParlay_Block OddMixParlay = new Choice_OddMixParlay_Block();
			public Choice_Score_Block Score = new Choice_Score_Block();
			protected static string s4 = "</span>";
			public Choice_BetType_Block BetType = new Choice_BetType_Block();
			public Choice_Match_Block Match = new Choice_Match_Block();
			public Choice_League_Block League = new Choice_League_Block();
			protected static string s5 = "</div>";
			public override void ToString(ref StringBuilder bd)
			{
				if(!Visible) return;
				if(RenderChild)
				{
					bd.Append(s0);
					bd.Append(ticketStatus);
					bd.Append(s1);
					if(null != ScoreMapIcon) ScoreMapIcon.ToString(ref bd);
					bd.Append(s2);
					bd.Append(betTeamClassName);
					bd.Append(s3);
					bd.Append(betTeam);
					if(null != Handicap) Handicap.ToString(ref bd);
					if(null != OddMixParlay) OddMixParlay.ToString(ref bd);
					if(null != Score) Score.ToString(ref bd);
					bd.Append(s4);
					if(null != BetType) BetType.ToString(ref bd);
					if(null != Match) Match.ToString(ref bd);
					if(null != League) League.ToString(ref bd);
					bd.Append(s5);
				}
				if(IsAssigned){bd.Append(Value);}
			}
			public string ToString()
			{
				StringBuilder bd = new StringBuilder();
				ToString(ref bd);
				return bd.ToString();
			}

		}

		public class Choice_ScoreMapIcon_Block: Block
		{
			protected static string s6 = "<span class='scoremap'><a href=\"javascript:OpenScoreMap(";
			public string matchId = "{matchId}";
			protected static string s7 = ",";
			public string betTypeId = "{betTypeId}";
			protected static string s8 = ",";
			public string liveindicator = "{liveindicator}";
			protected static string s9 = ");\"title=\"Score Map\"><div class='scoremapIcon'></div></a></span>";
			public override void ToString(ref StringBuilder bd)
			{
				if(!Visible) return;
				if(RenderChild)
				{
					bd.Append(s6);
					bd.Append(matchId);
					bd.Append(s7);
					bd.Append(betTypeId);
					bd.Append(s8);
					bd.Append(liveindicator);
					bd.Append(s9);
				}
				if(IsAssigned){bd.Append(Value);}
			}
		}

		public class Choice_Handicap_Block: Block
		{
			protected static string s10 = "<span class='handicap'> ";
			public string handicap = "{handicap}";
			public Choice_Handicap_Odds_Block Odds = new Choice_Handicap_Odds_Block();
			protected static string s11 = "</span>";
			public override void ToString(ref StringBuilder bd)
			{
				if(!Visible) return;
				if(RenderChild)
				{
					bd.Append(s10);
					bd.Append(handicap);
					if(null != Odds) Odds.ToString(ref bd);
					bd.Append(s11);
				}
				if(IsAssigned){bd.Append(Value);}
			}
		}

		public class Choice_Handicap_Odds_Block: Block
		{
			protected static string s12 = "<span class=\"odds\"> @ ";
			public string odds = "{odds}";
			protected static string s13 = "</span>";
			public override void ToString(ref StringBuilder bd)
			{
				if(!Visible) return;
				if(RenderChild)
				{
					bd.Append(s12);
					bd.Append(odds);
					bd.Append(s13);
				}
				if(IsAssigned){bd.Append(Value);}
			}
		}

		public class Choice_OddMixParlay_Block: Block
		{
			public override void ToString(ref StringBuilder bd)
			{
				if(IsAssigned){bd.Append(Value);}
			}
		}

		public class Choice_Score_Block: Block
		{
			protected static string s14 = "<span class=\"";
			public string scoreClassName = "favorite";
			protected static string s15 = "\"> [";
			public string homeScore = "{homeScore}";
			protected static string s16 = "-";
			public string awayScore = "{awayScore}";
			protected static string s17 = "]</span>";
			public override void ToString(ref StringBuilder bd)
			{
				if(!Visible) return;
				if(RenderChild)
				{
					bd.Append(s14);
					bd.Append(scoreClassName);
					bd.Append(s15);
					bd.Append(homeScore);
					bd.Append(s16);
					bd.Append(awayScore);
					bd.Append(s17);
				}
				if(IsAssigned){bd.Append(Value);}
			}
		}

		public class Choice_BetType_Block: Block
		{
			protected static string s18 = "<div class=\"bettype\"> ";
			public string betTypeName = "{betTypeName}";
			protected static string s19 = "</div>";
			public override void ToString(ref StringBuilder bd)
			{
				if(!Visible) return;
				if(RenderChild)
				{
					bd.Append(s18);
					bd.Append(betTypeName);
					bd.Append(s19);
				}
				if(IsAssigned){bd.Append(Value);}
			}
		}

		public class Choice_Match_Block: Block
		{
			protected static string s20 = "<div class=\"match\"><span>";
			public string homeTeam = "{homeTeam}";
			protected static string s21 = "</span>";
			public string home_firstGoal_lastGoal = "{home_firstGoal_lastGoal}";
			public Choice_Match_VS_Block VS = new Choice_Match_VS_Block();
			protected static string s22 = "<span>";
			public string awayTeam = "{awayTeam}";
			protected static string s23 = "</span>";
			public string away_firstGoal_lastGoal = "{away_firstGoal_lastGoal}";
			protected static string s24 = "</div>";
			public override void ToString(ref StringBuilder bd)
			{
				if(!Visible) return;
				if(RenderChild)
				{
					bd.Append(s20);
					bd.Append(homeTeam);
					bd.Append(s21);
					bd.Append(home_firstGoal_lastGoal);
					if(null != VS) VS.ToString(ref bd);
					bd.Append(s22);
					bd.Append(awayTeam);
					bd.Append(s23);
					bd.Append(away_firstGoal_lastGoal);
					bd.Append(s24);
				}
				if(IsAssigned){bd.Append(Value);}
			}
		}

		public class Choice_Match_VS_Block: Block
		{
			protected static string s25 = "<span>&nbsp;-&nbsp;vs&nbsp;-&nbsp;</span>";
			public override void ToString(ref StringBuilder bd)
			{
				if(!Visible) return;
				if(RenderChild)
				{
					bd.Append(s25);
				}
				if(IsAssigned){bd.Append(Value);}
			}
		}

		public class Choice_League_Block: Block
		{
			protected static string s26 = "<div class=\"league\"><span class=\"sport\">";
			public string sportTypeName = "{sportTypeName}";
			protected static string s27 = "</span>";
			public Choice_League_LeagueName_Block LeagueName = new Choice_League_LeagueName_Block();
			protected static string s28 = "</div>";
			public override void ToString(ref StringBuilder bd)
			{
				if(!Visible) return;
				if(RenderChild)
				{
					bd.Append(s26);
					bd.Append(sportTypeName);
					bd.Append(s27);
					if(null != LeagueName) LeagueName.ToString(ref bd);
					bd.Append(s28);
				}
				if(IsAssigned){bd.Append(Value);}
			}
		}

		public class Choice_League_LeagueName_Block: Block
		{
			protected static string s29 = "<span class=\"leagueName\">&nbsp;";
			public string leagueName = "{leagueName}";
			protected static string s30 = "</span>";
			public override void ToString(ref StringBuilder bd)
			{
				if(!Visible) return;
				if(RenderChild)
				{
					bd.Append(s29);
					bd.Append(leagueName);
					bd.Append(s30);
				}
				if(IsAssigned){bd.Append(Value);}
			}
		}

	}
}
#pragma warning enable
#endregion