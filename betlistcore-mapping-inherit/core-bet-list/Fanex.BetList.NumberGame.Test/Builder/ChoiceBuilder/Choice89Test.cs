// <auto-generated/>
namespace Fanex.BetList.Core.UnitTest.Builder.ChoiceBuilder
{
    using App_GlobalResources;
    using Common.Enums;
    using Core.Builder.ChoiceBuilder;
    using Entities;
    using NSubstitute;
    using NUnit.Framework;

    public class Choice89Test
    {
        private static string spanClassWith37point5 = " <span style='color:#555555'>37.5</span> ";

        private static object[] betTeamNames =
        {
            // ticket.Live, betId, ticket.BetTeam, expectedValue
            new object[] { true, 0, "1:1", string.Join(null, CoreBetList.lblOverOdd, spanClassWith37point5, " [0]") },
            new object[] { true, 0, "1:2", string.Join(null, CoreBetList.lblOverEven, spanClassWith37point5, " [0]") },
            new object[] { true, 0, "2:1", string.Join(null, CoreBetList.lblUnderOdd, spanClassWith37point5, " [0]") },
            new object[] { true, 0, "2:2", string.Join(null, CoreBetList.lblUnderEven, spanClassWith37point5, " [0]") },

            new object[] { false, 0, "1:1", string.Join(null, CoreBetList.lblOverOdd, spanClassWith37point5," [0]") },
            new object[] { false, 0, "1:2", string.Join(null, CoreBetList.lblOverEven, spanClassWith37point5, " [0]") },
            new object[] { false, 0, "2:1", string.Join(null, CoreBetList.lblUnderOdd, spanClassWith37point5, " [0]") },
            new object[] { false, 0, "2:2", string.Join(null, CoreBetList.lblUnderEven, spanClassWith37point5, " [0]") },

            new object[] { true, 1, "1:1", string.Join(null, CoreBetList.lblOverOdd, spanClassWith37point5, " [1]") },
            new object[] { true, 1, "1:2", string.Join(null, CoreBetList.lblOverEven, spanClassWith37point5, " [1]") },
            new object[] { true, 1, "2:1", string.Join(null, CoreBetList.lblUnderOdd, spanClassWith37point5, " [1]") },
            new object[] { true, 1, "2:2", string.Join(null, CoreBetList.lblUnderEven, spanClassWith37point5, " [1]") },

            new object[] { false, 1, "1:1", string.Join(null, CoreBetList.lblOverOdd, spanClassWith37point5, " [0]") },
            new object[] { false, 1, "1:2", string.Join(null, CoreBetList.lblOverEven, spanClassWith37point5, " [0]") },
            new object[] { false, 1, "2:1", string.Join(null, CoreBetList.lblUnderOdd, spanClassWith37point5, " [0]") },
            new object[] { false, 1, "2:2", string.Join(null, CoreBetList.lblUnderEven, spanClassWith37point5, " [0]") }
        };

        private Choice89 _choice;
        private ITicket _ticket;
        private ITicketHelper _ticketHelper;

        [SetUp]
        public void Setup()
        {
            _choice = new Choice89();
            _ticket = Substitute.For<ITicket>();
            _ticket.BetTypeId = BetTypes.Next_Combo;
            _ticketHelper = Substitute.For<ITicketHelper>();
        }

        [Test]
        public void BuildScore_Always_SetScoreBlockIsNull()
        {
            // Act
            var choiceTemplate = _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.IsNull(choiceTemplate.Score);
        }

        [Test]
        public void BuildMatch_Always_SetMatchVSBlockIsNull()
        {
            // Act
            var choiceTemplate = _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.IsNull(choiceTemplate.Match.VS);
        }

        [Test]
        public void BuildBetTeamClassNameAndHandicap_Always_SetHandicapIsEmpty()
        {
            // Act
            var choiceTemplate = _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.IsNullOrEmpty(choiceTemplate.Handicap.handicap);
        }

        [Test]
        public void BuildBetTeamClassNameAndHandicap_Always_SetBetTeamClassNameIsFavorite()
        {
            // Act
            var choiceTemplate = _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual("favorite", choiceTemplate.betTeamClassName);
        }

        [Test]
        public void BuildMatch_Always_SetHomeTeamIsJoinedByNumberGameNoResourceAndMatchCode()
        {
            // Arrange
            _ticket.MatchCode = "6969";

            // Act
            var choiceTemplate = _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());
            var actualHomeTeam = choiceTemplate.Match.homeTeam;

            // Assert
            var expectedHomeTeam = string.Join(null, new string[] { CoreBetList.numbergameno, "&nbsp;", _ticket.MatchCode });
            Assert.AreEqual(expectedHomeTeam, actualHomeTeam);
        }

        [Test, TestCaseSource("betTeamNames")]
        public void BuildBetTeam_WhenCalled_SetValidNameForBetTeam(bool isLive, long betId, string ticketBetTeam, string expectedBetTeam)
        {
            // Arrange
            _ticket.IsLive = isLive;
            _ticket.BetId = betId;
            _ticket.BetTeam = ticketBetTeam;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(expectedBetTeam, _choice.Template.betTeam);
        }
    }
}