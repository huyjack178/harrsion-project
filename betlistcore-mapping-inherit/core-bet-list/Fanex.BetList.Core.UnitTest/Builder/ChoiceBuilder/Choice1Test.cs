// <auto-generated/>
namespace Fanex.BetList.Core.UnitTest.Builder.ChoiceBuilder
{
    using System;
    using Common.Enums;
    using Core.Builder.ChoiceBuilder;
    using Entities;
    using NSubstitute;
    using NUnit.Framework;

    /// <summary>
    /// Unit test for Choice1 class.
    /// </summary>
    [TestFixture]
    public class Choice1Test
    {
        private IChoice _choice;
        private ITicket _ticket;
        private ITicketHelper _ticketHelper;

        [SetUp]
        public void Setup()
        {
            _choice = new Choice1();
            _ticket = Substitute.For<ITicket>();
            _ticket.BetTypeId = BetTypes.Handicap;
            _ticketHelper = Substitute.For<ITicketHelper>();
        }

        [Test]
        public void BuildScore_Always_SetHomeScoreIsLiveHomeScore()
        {
            // Arrange
            _ticket.LiveHomeScore = 1;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(_ticket.LiveHomeScore.ToString(), _choice.Template.Score.homeScore);
        }

        [Test]
        public void BuildScore_Always_SetAwayScoreIsLiveAwayScore()
        {
            // Arrange
            _ticket.LiveAwayScore = 1;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(_ticket.LiveAwayScore.ToString(), _choice.Template.Score.awayScore);
        }

        [TestCase(true)]
        [TestCase(false)]
        public void BuildScore_Always_SetScoreVisibleIsIsLive(bool isLive)
        {
            // Arrange
            _ticket.IsLive = isLive;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(isLive, _choice.Template.Score.Visible);
        }

        [Test]
        public void BuildLeague_Always_SetLeagueNameIsLeagueName()
        {
            // Arrange
            const string LEAGUE_NAME = "League name";
            _ticketHelper.GetLeagueNameById(Arg.Any<int>()).Returns<string>(LEAGUE_NAME);

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(LEAGUE_NAME, _choice.Template.League.LeagueName.leagueName);
        }

        [Test]
        public void BuildSport_Always_SetSportNameIsSportName()
        {
            // Arrange
            const string SPORT_NAME = "Sport name";
            _ticketHelper.GetSportNameById(Arg.Any<int>()).Returns<string>(SPORT_NAME);

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(SPORT_NAME, _choice.Template.League.sportTypeName);
        }

        [Test]
        public void BuildBetType_Always_SetBetTypeIsBetTypeName()
        {
            // Arrange
            const string BET_TYPE_NAME = "Bet type name";
            _ticketHelper.GetBetTypeNameById(Arg.Any<int>()).Returns<string>(BET_TYPE_NAME);

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(BET_TYPE_NAME, _choice.Template.BetType.betTypeName);
        }

        [Test]
        public void BuildMatch_NeutralTicket_HomeTeamAreHomeTeamNameAndSpaceAndCharacterNWithinParenthese()
        {
            // Arrange
            _ticket.IsNeutral = true;
            _ticketHelper.GetTeamNameById(Arg.Any<long>()).Returns<string>("Home team name");

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string HOME_TEAM_NAME = "Home team name (N) ";
            Assert.AreEqual(HOME_TEAM_NAME, _choice.Template.Match.homeTeam);
        }

        [Test]
        public void BuildMatch_NotNeutralTicket_HomeTeamIsHomeTeamName()
        {
            // Arrange
            const string HOME_TEAM_NAME = "Home team name";
            _ticket.IsNeutral = false;
            _ticketHelper.GetTeamNameById(Arg.Any<long>()).Returns<string>(HOME_TEAM_NAME);

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(HOME_TEAM_NAME, _choice.Template.Match.homeTeam);
        }

        [Test]
        public void BuildMatch_Always_SetAwayTeamIsAwayTeamName()
        {
            // Arrange
            const string AWAY_TEAM_NAME = "Away team name";
            _ticketHelper.GetTeamNameById(Arg.Any<long>()).Returns<string>(AWAY_TEAM_NAME);

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(AWAY_TEAM_NAME, _choice.Template.Match.awayTeam);
        }

        [TestCase("FL:0-1")]
        [TestCase("FL:2-1")]
        public void BuildFGLGLabel_EventStatus_HomeFGLGIsLableLG(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string HOME_FGLG = "&nbsp;<div class='lastGoal'>&nbsp;</div>";
            Assert.AreEqual(HOME_FGLG, _choice.Template.Match.home_firstGoal_lastGoal);
        }

        [TestCase("1FL:0-1")]
        [TestCase("1FL:2-1")]
        public void BuildFGLGLabel_EventStatus_HomeFGLGIsLable1LG(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string HOME_FGLG = "&nbsp;<div class='fhLastGoal'>&nbsp;</div>";
            Assert.AreEqual(HOME_FGLG, _choice.Template.Match.home_firstGoal_lastGoal);
        }

        [TestCase("FL:0-1;1FL:0-1")]
        [TestCase("FL:2-1;1FL:2-1")]
        public void BuildFGLGLabel_EventStatus_HomeFGLGAreLableLGAndLable1LG(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string HOME_FGLG = "&nbsp;<div class='lastGoal'>&nbsp;</div><div class='fhLastGoal'>&nbsp;</div>";
            Assert.AreEqual(HOME_FGLG, _choice.Template.Match.home_firstGoal_lastGoal);
        }

        [TestCase("FL:0-2")]
        [TestCase("FL:1-2")]
        public void BuildFGLGLabel_EventStatus_AwayFGLGIsLableLG(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string AWAY_FGLG = "&nbsp;<div class='lastGoal'>&nbsp;</div>";
            Assert.AreEqual(AWAY_FGLG, _choice.Template.Match.away_firstGoal_lastGoal);
        }

        [TestCase("1FL:0-2")]
        [TestCase("1FL:1-2")]
        public void BuildFGLGLabel_EventStatus_AwayFGLGIsLable1LG(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string AWAY_FGLG = "&nbsp;<div class='fhLastGoal'>&nbsp;</div>";
            Assert.AreEqual(AWAY_FGLG, _choice.Template.Match.away_firstGoal_lastGoal);
        }

        [TestCase("FL:0-2;1FL:0-2")]
        [TestCase("FL:1-2;1FL:1-2")]
        public void BuildFGLGLabel_EventStatus_AwayFGLGAreLableLGAndLable1LG(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string AWAY_FGLG = "&nbsp;<div class='lastGoal'>&nbsp;</div><div class='fhLastGoal'>&nbsp;</div>";
            Assert.AreEqual(AWAY_FGLG, _choice.Template.Match.away_firstGoal_lastGoal);
        }

        [TestCase("FL:1-0")]
        [TestCase("FL:1-2")]
        public void BuildFGLGLabel_EventStatus_HomeFGLGIsLableFG(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string HOME_FGLG = "&nbsp;<div class='firstGoal '>&nbsp;</div>";
            Assert.AreEqual(HOME_FGLG, _choice.Template.Match.home_firstGoal_lastGoal);
        }

        [TestCase("1FL:1-0")]
        [TestCase("1FL:1-2")]
        public void BuildFGLGLabel_EventStatus_HomeFGLGIsLable1FG(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string HOME_FGLG = "&nbsp;<div class='fhFirstGoal'>&nbsp;</div>";
            Assert.AreEqual(HOME_FGLG, _choice.Template.Match.home_firstGoal_lastGoal);
        }

        [TestCase("FL:1-0;1FL:1-0")]
        [TestCase("FL:1-2;1FL:1-2")]
        public void BuildFGLGLabel_EventStatus_HomeFGLGAreLableFGAndLable1FG(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string HOME_FGLG = "&nbsp;<div class='firstGoal '>&nbsp;</div><div class='fhFirstGoal'>&nbsp;</div>";
            Assert.AreEqual(HOME_FGLG, _choice.Template.Match.home_firstGoal_lastGoal);
        }

        [Test]
        public void BuildFGLGLabel_EventStatusIsFL11_HomeFGLGAreLableFGAndLableLG()
        {
            // Arrange
            _ticket.EventStatus = "FL:1-1";

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string HOME_FGLG = "&nbsp;<div class='firstGoal '>&nbsp;</div><div class='lastGoal'>&nbsp;</div>";
            Assert.AreEqual(HOME_FGLG, _choice.Template.Match.home_firstGoal_lastGoal);
        }

        [Test]
        public void BuildFGLGLabel_EventStatusIs1FL11_HomeFGLGAreLable1FGAndLable1LG()
        {
            // Arrange
            _ticket.EventStatus = "1FL:1-1";

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string HOME_FGLG = "&nbsp;<div class='fhFirstGoal'>&nbsp;</div><div class='fhLastGoal'>&nbsp;</div>";
            Assert.AreEqual(HOME_FGLG, _choice.Template.Match.home_firstGoal_lastGoal);
        }

        [Test]
        public void BuildFGLGLabel_EventStatusIsFL11And1FL11_HomeFGLGAreLableFGLGAndLable1FG1LG()
        {
            // Arrange
            _ticket.EventStatus = "FL:1-1;1FL:1-1";

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string HOME_FGLG = "&nbsp;<div class='firstGoal '>&nbsp;</div><div class='lastGoal'>&nbsp;</div><div class='fhFirstGoal'>&nbsp;</div><div class='fhLastGoal'>&nbsp;</div>";
            Assert.AreEqual(HOME_FGLG, _choice.Template.Match.home_firstGoal_lastGoal);
        }

        [Test]
        public void BuildFGLGLabel_EventStatusIsFL22_AwayFGLGAreLableFGAndLableLG()
        {
            // Arrange
            _ticket.EventStatus = "FL:2-2";

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string AWAY_FGLG = "&nbsp;<div class='firstGoal '>&nbsp;</div><div class='lastGoal'>&nbsp;</div>";
            Assert.AreEqual(AWAY_FGLG, _choice.Template.Match.away_firstGoal_lastGoal);
        }

        [Test]
        public void BuildFGLGLabel_EventStatusIs1FL22_AwayFGLGAreLable1FGAndLable1LG()
        {
            // Arrange
            _ticket.EventStatus = "1FL:2-2";

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string AWAY_FGLG = "&nbsp;<div class='fhFirstGoal'>&nbsp;</div><div class='fhLastGoal'>&nbsp;</div>";
            Assert.AreEqual(AWAY_FGLG, _choice.Template.Match.away_firstGoal_lastGoal);
        }

        [Test]
        public void BuildFGLGLabel_EventStatusIsFL22And1FL22_AwayFGLGAreLableFGLGAndLable1FG1LG()
        {
            // Arrange
            _ticket.EventStatus = "FL:2-2;1FL:2-2";

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string AWAY_FGLG = "&nbsp;<div class='firstGoal '>&nbsp;</div><div class='lastGoal'>&nbsp;</div><div class='fhFirstGoal'>&nbsp;</div><div class='fhLastGoal'>&nbsp;</div>";
            Assert.AreEqual(AWAY_FGLG, _choice.Template.Match.away_firstGoal_lastGoal);
        }

        [TestCase("FL:2-0")]
        [TestCase("FL:2-1")]
        public void BuildFGLGLabel_EventStatus_AwayFGLGIsLableFG(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string AWAY_FGLG = "&nbsp;<div class='firstGoal '>&nbsp;</div>";
            Assert.AreEqual(AWAY_FGLG, _choice.Template.Match.away_firstGoal_lastGoal);
        }

        [TestCase("1FL:2-0")]
        [TestCase("1FL:2-1")]
        public void BuildFGLGLabel_EventStatus_AwayFGLGIsLable1FG(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string AWAY_FGLG = "&nbsp;<div class='fhFirstGoal'>&nbsp;</div>";
            Assert.AreEqual(AWAY_FGLG, _choice.Template.Match.away_firstGoal_lastGoal);
        }

        [TestCase("FL:2-0;1FL:2-0")]
        [TestCase("FL:2-1;1FL:2-1")]
        [TestCase("1FL:2-0;FL:2-0")]
        [TestCase("1FL:2-1;FL:2-1")]
        public void BuildFGLGLabel_EventStatus_AwayFGLGAreLableFGAndLable1FG(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string AWAY_FGLG = "&nbsp;<div class='firstGoal '>&nbsp;</div><div class='fhFirstGoal'>&nbsp;</div>";
            Assert.AreEqual(AWAY_FGLG, _choice.Template.Match.away_firstGoal_lastGoal);
        }

        [TestCase("")]
        [TestCase(null)]
        [TestCase("FL:2-2")]
        [TestCase("FL:2-0")]
        [TestCase("FL:0-2")]
        [TestCase("1FL:2-2")]
        [TestCase("1FL:2-0")]
        [TestCase("1FL:0-2")]
        public void BuildFGLGLabel_EventStatus_HomeFGLGIsEmpty(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.IsEmpty(_choice.Template.Match.home_firstGoal_lastGoal);
        }

        [TestCase("")]
        [TestCase(null)]
        [TestCase("FL:1-1")]
        [TestCase("FL:1-0")]
        [TestCase("FL:0-1")]
        [TestCase("1FL:1-1")]
        [TestCase("1FL:1-0")]
        [TestCase("1FL:0-1")]
        public void BuildFGLGLabel_EventStatus_AwayFGLGIsEmpty(string eventStatus)
        {
            // Arrange
            _ticket.EventStatus = eventStatus;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.IsEmpty(_choice.Template.Match.away_firstGoal_lastGoal);
        }

        [Test]
        public void BuildBetTeam_BetTeamContainsCharacterh_BetTeamIsHomeTeamName()
        {
            // Arrange
            const string HOME_TEAM_NAME = "Home team name";
            _ticket.BetTeam = "text h";
            _ticketHelper.GetTeamNameById(Arg.Any<long>()).Returns<string>(HOME_TEAM_NAME);

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(HOME_TEAM_NAME, _choice.Template.betTeam);
        }

        [Test]
        public void BuildBetTeam_BetTeamIsNull_BetTeamIsAwayTeamName()
        {
            // Arrange
            const string AWAY_TEAM_NAME = "Away team name";
            _ticket.BetTeam = null;
            _ticketHelper.GetTeamNameById(Arg.Any<long>()).Returns<string>(AWAY_TEAM_NAME);

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(AWAY_TEAM_NAME, _choice.Template.betTeam);
        }

        [Test]
        public void BuildBetTeam_BetTeamIsEmpty_BetTeamIsAwayTeamName()
        {
            // Arrange
            const string AWAY_TEAM_NAME = "Away team name";
            _ticket.BetTeam = string.Empty;
            _ticketHelper.GetTeamNameById(Arg.Any<long>()).Returns<string>(AWAY_TEAM_NAME);

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(AWAY_TEAM_NAME, _choice.Template.betTeam);
        }

        [Test]
        public void BuildBetTeamClassNameAndHandicap_BetTeamContainsCharacterhAndHandicap2GreaterThanHandicap1_BetTeamClassNameIsUnderdog()
        {
            // Arrange
            _ticket.BetTeam = "text h";
            _ticket.Handicap1 = 1;
            _ticket.Handicap2 = 2;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string CSS_CLASS_UNDERDOG = "underdog";
            Assert.AreEqual(CSS_CLASS_UNDERDOG, _choice.Template.betTeamClassName);
        }

        [Test]
        public void BuildBetTeamClassNameAndHandicap_BetTeamContainsCharacterhAndHandicap2EqualHandicap1_BetTeamClassNameIsUnderdog()
        {
            // Arrange
            _ticket.BetTeam = "text h";
            _ticket.Handicap1 = 1;
            _ticket.Handicap2 = 1;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string CSS_CLASS_UNDERDOG = "underdog";
            Assert.AreEqual(CSS_CLASS_UNDERDOG, _choice.Template.betTeamClassName);
        }

        [Test]
        public void BuildBetTeamClassNameAndHandicap_BetTeamContainsCharacterhAndHandicap2LessThanHandicap1_BetTeamClassNameIsFavorite()
        {
            // Arrange
            _ticket.BetTeam = "text h";
            _ticket.Handicap1 = 2;
            _ticket.Handicap2 = 1;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string CSS_CLASS_FAVORITE = "favorite";
            Assert.AreEqual(CSS_CLASS_FAVORITE, _choice.Template.betTeamClassName);
        }

        [Test]
        public void BuildBetTeamClassNameAndHandicap_BetTeamNotContainsCharacterhAndHandicap2LessThanHandicap1_BetTeamClassNameIsUnderdog()
        {
            // Arrange
            _ticket.BetTeam = string.Empty;
            _ticket.Handicap1 = 2;
            _ticket.Handicap2 = 1;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string CSS_CLASS_UNDERDOG = "underdog";
            Assert.AreEqual(CSS_CLASS_UNDERDOG, _choice.Template.betTeamClassName);
        }

        [Test]
        public void BuildBetTeamClassNameAndHandicap_BetTeamNotContainsCharacterhAndHandicap2EqualHandicap1_BetTeamClassNameIsUnderdog()
        {
            // Arrange
            _ticket.BetTeam = string.Empty;
            _ticket.Handicap1 = 1;
            _ticket.Handicap2 = 1;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string CSS_CLASS_UNDERDOG = "underdog";
            Assert.AreEqual(CSS_CLASS_UNDERDOG, _choice.Template.betTeamClassName);
        }

        [Test]
        public void BuildBetTeamClassNameAndHandicap_BetTeamNotContainsCharacterhAndHandicap2GreaterThanHandicap1_BetTeamClassNameIsFavorite()
        {
            // Arrange
            _ticket.BetTeam = string.Empty;
            _ticket.Handicap1 = 1;
            _ticket.Handicap2 = 2;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string CSS_CLASS_FAVORITE = "favorite";
            Assert.AreEqual(CSS_CLASS_FAVORITE, _choice.Template.betTeamClassName);
        }

        [Test]
        public void BuildScore_Always_SetScoreClassNameIsFavorite()
        {
            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string CSS_CLASS_FAVORITE = "favorite";
            Assert.AreEqual(CSS_CLASS_FAVORITE, _choice.Template.Score.scoreClassName);
        }

        [Test]
        public void BuildBetTeamClassNameAndHandicap_BetTeamContainsCharacterhAndHandicap2GreaterThanHandicap1_HandicapIsHandicap2()
        {
            // Arrange
            _ticket.BetTeam = "text h";
            _ticket.Handicap1 = 1;
            _ticket.Handicap2 = 2;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(_ticket.Handicap2.ToString(), _choice.Template.Handicap.handicap);
        }

        [Test]
        public void BuildBetTeamClassNameAndHandicap_BetTeamContainsCharacterhAndHandicap2LessThanHandicap1_HandicapIsMinusHandicap1()
        {
            // Arrange
            _ticket.BetTeam = "text h";
            _ticket.Handicap1 = 2;
            _ticket.Handicap2 = 1;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(string.Format("-{0}", _ticket.Handicap1), _choice.Template.Handicap.handicap);
        }

        [Test]
        public void BuildTicketStatus_StatusIdIsNull_TicketStatusIsEmpty()
        {
            // Arrange
            _ticket.StatusId = null;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.IsEmpty(_choice.Template.ticketStatus);
        }

        [Test]
        public void BuildTicketStatus_StatusIdIsVoid_TicketStatusIsVoid()
        {
            // Arrange
            const int VOID_STATUSID = 102;
            _ticket.StatusId = VOID_STATUSID;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string VOID_STATUS = "void";
            Assert.AreEqual(VOID_STATUS, _choice.Template.ticketStatus);
        }

        [Test]
        public void BuildTicketStatus_StatusIsNull_TicketStatusIsEmpty()
        {
            // Arrange
            _ticket.Status = null;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.IsEmpty(_choice.Template.ticketStatus);
        }

        [Test]
        public void BuildTicketStatus_StatusIsVoid_TicketStatusIsVoid()
        {
            // Arrange
            const string VOID_STATUS = "void";
            _ticket.Status = VOID_STATUS;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(VOID_STATUS, _choice.Template.ticketStatus);
        }

        [Test]
        public void BuildTicketStatus_StatusIdIsRefund_TicketStatusIsRefund()
        {
            // Arrange
            const int REFUND_STATUSID = 103;
            _ticket.StatusId = REFUND_STATUSID;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string REFUND_STATUS = "refund";
            Assert.AreEqual(REFUND_STATUS, _choice.Template.ticketStatus);
        }

        [Test]
        public void BuildTicketStatus_StatusIsRefund_TicketStatusIsRefund()
        {
            // Arrange
            const string REFUND_STATUS = "refund";
            _ticket.Status = REFUND_STATUS;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(REFUND_STATUS, _choice.Template.ticketStatus);
        }

        [Test]
        public void BuildTicketStatus_StatusIdIsReject_TicketStatusIsReject()
        {
            // Arrange
            const int REJECT_STATUSID = 101;
            _ticket.StatusId = REJECT_STATUSID;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string REJECT_STATUS = "reject";
            Assert.AreEqual(REJECT_STATUS, _choice.Template.ticketStatus);
        }

        [Test]
        public void BuildTicketStatus_StatusIsReject_TicketStatusIsReject()
        {
            // Arrange
            const string REJECT_STATUS = "reject";
            _ticket.Status = REJECT_STATUS;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(REJECT_STATUS, _choice.Template.ticketStatus);
        }

        [Test]
        public void BuildHandicapOdds_IsShowOddsWithChoiceHelperIsFalse_HandicapOddsIsNull()
        {
            // Arrange
            _ticketHelper.IsShowOddsWithChoice = false;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.IsNull(_choice.Template.Handicap.Odds);
        }

        [Test]
        public void BuildHandicapOdds_IsShowOddsWithChoiceHelperIsTrueAndOddsTypeTicketIsEmpty_HandicapOddsIsOdds()
        {
            // Arrange
            _ticketHelper.IsShowOddsWithChoice = true;
            _ticket.OddsType = string.Empty;
            _ticket.Odds = 1;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(_ticket.Odds.ToString(), _choice.Template.Handicap.Odds.odds);
        }

        [Test]
        public void BuildHandicapOdds_IsShowOddsWithChoiceHelperIsTrue_HandicapOddsIsNull()
        {
            // Arrange
            _ticketHelper.IsShowOddsWithChoice = true;
            _ticket.OddsType = "1";
            _ticket.Odds = -1;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.IsNull(_choice.Template.Handicap.Odds);
        }

        [Test]
        public void BuildScoreMap_IsShowScoreMap_ScoreMapIconMatchIdIsMatchId()
        {
            // Arrange
            _ticket.MatchId = 1;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, true);

            // Assert
            Assert.AreEqual(_ticket.MatchId.ToString(), _choice.Template.ScoreMapIcon.matchId);
        }

        [Test]
        public void BuildScoreMap_IsShowScoreMap_ScoreMapIconBetTypeIsBetTypeId()
        {
            // Arrange
            _ticket.BetTypeId = 1;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, true);

            // Assert
            Assert.AreEqual(_ticket.BetTypeId.ToString(), _choice.Template.ScoreMapIcon.betTypeId);
        }

        [Test]
        public void BuildScoreMap_IsShowScoreMap_ScoreMapIconLiveIndicatorIsIsLive()
        {
            // Arrange
            _ticket.IsLive = true;

            // Act
            _choice.Render(_ticket, _ticketHelper, null, true);

            // Assert
            string expectedLiveIndicator = Convert.ToInt32(_ticket.IsLive).ToString();
            Assert.AreEqual(expectedLiveIndicator, _choice.Template.ScoreMapIcon.liveindicator);
        }

        [Test]
        public void BuildScoreMap_IsNotShowScoreMap_ScoreMapIconIsNull()
        {
            // Act
            _choice.Render(_ticket, _ticketHelper, null, false);

            // Assert
            Assert.IsNull(_choice.Template.ScoreMapIcon);
        }

        [Test]
        public void BuildBetTeamClassNameAndHandicap_SportIsMuayThaiAndBetTeamIsHome_BetTeamClassNameIsFavorite()
        {
            _ticket.SportTypeId = 44;
            _ticket.BetTeam = "h";

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            string expectedBetTeamClassName = "favorite";
            Assert.AreEqual(expectedBetTeamClassName, _choice.Template.betTeamClassName);
        }

        [Test]
        public void BuildBetTeamClassNameAndHandicap_SportIsMuayThaiAndBetTeamIsAway_BetTeamClassNameIsLightBlue()
        {
            _ticket.SportTypeId = 44;
            _ticket.BetTeam = "a";

            // Act
            _choice.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            string expectedBetTeamClassName = "favorite light-blue";
            Assert.AreEqual(expectedBetTeamClassName, _choice.Template.betTeamClassName);
        }
    }
}