// <auto-generated/>
namespace Fanex.BetList.Core.UnitTest.Builder.ChoiceBuilder
{
    using App_GlobalResources;
    using Common.Enums;
    using Core.Builder.ChoiceBuilder;
    using Core.Templates;
    using Entities;
    using NSubstitute;
    using NUnit.Framework;

    [TestFixture]
    public class Choice133Test
    {
        private ITicket _ticket;
        private IChoice _choice;
        private ITicketHelper _ticketHelper;

        [SetUp]
        public void SetUp()
        {
            _ticket = Substitute.For<ITicket>();
            _ticket.BetTypeId = BetTypes.HomeToWinBothHalves;
            _ticketHelper = Substitute.For<ITicketHelper>();
            _choice = new Choice133();
        }

        [Test]
        public void BuildBetTeam_BetTeamIsCharactery_BetTeamIsLabelYesResource()
        {
            // Arrange
            _ticket.BetTeam = "y";

            // Act
            _choice.Render(_ticket, _ticketHelper, null, false);

            // Assert
            string expected = CoreBetList.lblYes;
            Assert.AreEqual(expected, _choice.Template.betTeam);
        }

        [Test]
        public void BuildBetTeam_BetTeamIsCharactern_BetTeamIsLabelNoResource()
        {
            // Arrange
            _ticket.BetTeam = "n";

            // Act
            _choice.Render(_ticket, _ticketHelper, null, false);

            // Assert
            string expected = CoreBetList.lblNo;
            Assert.AreEqual(expected, _choice.Template.betTeam);
        }

        [Test]
        public void BuildBetTeam_BetTeamIsNotYAndNotN_BetTeamIsEmpty()
        {
            // Arrange
            _ticket.BetTeam = "any string";

            // Act
            _choice.Render(_ticket, _ticketHelper, null, false);

            // Assert
            Assert.IsEmpty(_choice.Template.betTeam);
        }

        [Test]
        public void BuildBetTeamClassNameAndHandicap_Alaways_SetVisibleHandicap()
        {
            // Act
            _choice.Render(_ticket, _ticketHelper, null, false);

            // Assert
            Assert.IsNull(_choice.Template.Handicap.handicap);
        }

        [Test]
        public void BuildScore_Always_SetVisibleScore()
        {
            // Act
            Choice_Template template = _choice.Render(_ticket, _ticketHelper, null, false);

            // Assert
            Assert.IsNull(_choice.Template.Score);
        }
    }
}