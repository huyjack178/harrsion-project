// <auto-generated/>
namespace Fanex.BetList.Core.UnitTest.Builder.StatusBuilder
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using Core.Builder.StatusBuilder;
    using Entities;
    using NSubstitute;
    using NUnit.Framework;

    public class Status1Test
    {
        private Status1 _status;
        private ITicket _ticket;
        private ITicketHelper _ticketHelper;

        [SetUp]
        public void Setup()
        {
            _status = new Status1();
            _ticket = Substitute.For<ITicket>();
            _ticketHelper = Substitute.For<ITicketHelper>();
        }

        [TestCase("", "")]
        [TestCase("running", "Running")]
        [TestCase("reject", "Reject")]
        [TestCase("won", "Won")]
        [TestCase("lose", "Lose")]
        [TestCase("draw", "Draw")]
        [TestCase("waiting", "Waiting")]
        [TestCase("void", "Void")]
        [TestCase("refund", "Refund")]
        public void BuildResult_Status_Result(string status, string expectedResult)
        {
            // Arrange
            _ticket.Status = status;

            // Act
            _status.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(expectedResult, _status.Template.result);
        }

        [TestCase("running")]
        [TestCase("waiting")]
        [TestCase("void")]
        [TestCase("reject")]
        [TestCase("refund")]
        public void BuildStatusResult_Status_StatusResultVisibleIsFalse(string status)
        {
            // Arrange
            _ticket.Status = status;

            // Act
            _status.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.IsFalse(_status.Template.StatusResult.Visible);
        }

        [TestCase("")]
        [TestCase("won")]
        [TestCase("lose")]
        [TestCase("draw")]
        [SuppressMessage("StyleCop.CSharp.Nexcel.NexcelRules", "EX1003:MethodMustBeDocumented", Justification = "Reviewed.")]
        public void BuildStatusResult_Status_MatchIdIsMatchId(string status)
        {
            // Arrange
            _ticket.Status = status;
            _ticket.MatchId = 100;

            // Act
            _status.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(_ticket.MatchId.ToString(), _status.Template.StatusResult.matchId);
        }

        [TestCase("")]
        [TestCase("won")]
        [TestCase("lose")]
        [TestCase("draw")]
        public void BuildStatusResult_Status_BetTypeIsBetTypeId(string status)
        {
            // Arrange
            _ticket.Status = status;
            _ticket.BetTypeId = 1;

            // Act
            _status.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(_ticket.BetTypeId.ToString(), _status.Template.StatusResult.betType);
        }

        [TestCase("")]
        [TestCase("won")]
        [TestCase("lose")]
        [TestCase("draw")]
        public void BuildStatusResult_StatusAndRaceIsEmpty_RaceIsZero(string status)
        {
            // Arrange
            _ticket.Status = status;
            _ticket.Race = string.Empty;

            // Act
            _status.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string RACE = "0";
            Assert.AreEqual(RACE, _status.Template.StatusResult.race);
        }

        [TestCase("")]
        [TestCase("won")]
        [TestCase("lose")]
        [TestCase("draw")]
        public void BuildStatusResult_Status_RaceIsRace(string status)
        {
            // Arrange
            const string RACE = "10";
            _ticket.Status = status;
            _ticket.Race = RACE;

            // Act
            _status.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(RACE, _status.Template.StatusResult.race);
        }

        [TestCase("")]
        [TestCase("won")]
        [TestCase("lose")]
        [TestCase("draw")]
        public void BuildStatusResult_Status_RefNoIsTransId(string status)
        {
            // Arrange
            _ticket.Status = status;
            _ticket.TransId = 100;

            // Act
            _status.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(_ticket.TransId.ToString(), _status.Template.StatusResult.refNo);
        }

        [TestCase("")]
        [TestCase("won")]
        [TestCase("lose")]
        [TestCase("draw")]
        public void BuildStatusResult_Status_SportTypeIsSportTypeId(string status)
        {
            // Arrange
            _ticket.Status = status;
            _ticket.SportTypeId = 1;

            // Act
            _status.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(_ticket.SportTypeId.ToString(), _status.Template.StatusResult.sportType);
        }

        [TestCase("")]
        [TestCase("won")]
        [TestCase("lose")]
        [TestCase("draw")]
        [SuppressMessage("StyleCop.CSharp.Nexcel.NexcelRules", "EX1003:MethodMustBeDocumented", Justification = "Reviewed.")]
        public void BuildStatusResult_Status_LeagueIsLeagueId(string status)
        {
            // Arrange
            _ticket.Status = status;
            _ticket.LeagueId = 1;

            // Act
            _status.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(_ticket.LeagueId.ToString(), _status.Template.StatusResult.league);
        }

        [TestCase("")]
        [TestCase("won")]
        [TestCase("lose")]
        [TestCase("draw")]
        public void BuildStatusResult_Status_UsernameIsUsername(string status)
        {
            // Arrange
            _ticket.Status = status;
            _ticket.UserName = "username";

            // Act
            _status.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(_ticket.UserName, _status.Template.StatusResult.userName);
        }

        [TestCase("")]
        [TestCase("won")]
        [TestCase("lose")]
        [TestCase("draw")]
        public void BuildStatusResult_Status_WinlostDateIsWinlostDate(string status)
        {
            // Arrange
            _ticket.Status = status;
            _ticket.WinlostDate = new DateTime(2012, 12, 24, 12, 12, 12);

            // Act
            _status.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            const string WINLOST_DATE = "12/24/2012 12:12:12 PM";
            Assert.AreEqual(WINLOST_DATE, _status.Template.StatusResult.winlostDate);
        }

        [Test]
        public void BuildIP_IsShowVNIPIsFalseAndIsVnIp_ShowIPBlockIsVisible()
        {
            // Arrange
            _ticket.IP = "vn-ip";
            _ticketHelper.IsVnIp("vn-ip").Returns(true);

            // Act
            _status.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.IsFalse(_status.Template.ShowIP.Visible);
        }

        [Test]
        public void BuildIP_IsShowVNIPIsFalseAndNotVnIp_BetIpIsIP()
        {
            // Arrange
            _ticket.IP = "not vn ip";

            // Act
            _status.Render(_ticket, _ticketHelper, null, Arg.Any<bool>());

            // Assert
            Assert.AreEqual(_ticket.IP, _status.Template.ShowIP.betIp);
        }

        [Test]
        public void BuildIP_IsShowVNIPIsTrue_BetIpIsIP()
        {
            // Arrange
            _ticket.IP = "sample ip";

            // Act
            _status.Render(_ticket, _ticketHelper, null, true);

            // Assert
            Assert.AreEqual(_ticket.IP, _status.Template.ShowIP.betIp);
        }
    }
}