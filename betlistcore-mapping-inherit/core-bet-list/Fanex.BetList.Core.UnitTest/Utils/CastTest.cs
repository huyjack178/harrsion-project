// <auto-generated/>
namespace Fanex.BetList.Core.UnitTest.Utils
{
    using System.Globalization;
    using System.Text;
    using Fanex.BetList.Core.Utils;
    using NUnit.Framework;

    public class CastTest
    {
        [Test]
        public void AsDecimal_ValueIsNull_ReturnDefaultValue()
        {
            // Arrange
            object value = null;
            decimal defaultValue = 0;

            // Act
            decimal result = Cast.AsDecimal(value, defaultValue, null);

            // Assert
            Assert.AreEqual(defaultValue, result);
        }

        [Test]
        public void AsDecimal_ValidValue_ReturnValue()
        {
            // Arrange
            var value = 0.15M;
            decimal defaultValue = 0;
            var culture = new CultureInfo("en-US");

            // Act
            decimal result = Cast.AsDecimal(value, defaultValue, culture);

            // Assert
            Assert.AreEqual(value, result);
        }

        [Test]
        public void AsDecimal_InvalidFormatValue_ReturnDefaultValue()
        {
            // Arrange
            var value = "abc";
            decimal defaultValue = 0;
            var culture = new CultureInfo("en-US");

            // Act
            decimal result = Cast.AsDecimal(value, defaultValue, culture);

            // Assert
            Assert.AreEqual(defaultValue, result);
        }

        [Test]
        public void AsDecimal_InvalidCastValue_ReturnDefaultValue()
        {
            // Arrange
            var value = new StringBuilder();
            decimal defaultValue = 0;
            var culture = new CultureInfo("en-US");

            // Act
            decimal result = Cast.AsDecimal(value, defaultValue, culture);

            // Assert
            Assert.AreEqual(defaultValue, result);
        }

        [Test]
        public void AsDecimal_ValidValueAndProviderIsNull_ReturnFormatNumberWithCurrentCulture()
        {
            // Arrange
            var value = 0.15M;
            decimal defaultValue = 0;

            // Act
            decimal result = Cast.AsDecimal(value, defaultValue, null);

            // Assert
            Assert.AreEqual(value, result);
        }
    }
}